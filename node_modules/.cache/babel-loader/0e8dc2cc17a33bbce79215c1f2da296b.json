{"ast":null,"code":"import _slicedToArray from \"/Users/capt4inmon/Documents/hospital-management-system-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/capt4inmon/Documents/hospital-management-system-fe/src/components/modals/UpdateDoctor.js\";\nimport React from 'react';\nimport { Modal, ModalBody, ModalHeader, Form, Input, FormGroup, Button, Label, CustomInput, Spinner } from 'reactstrap';\nimport { getById, updateDoctor } from '../../services/admin.services';\nexport const UpdateDoctor = ({\n  id\n}) => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isOpen = _React$useState2[0],\n        setIsOpen = _React$useState2[1];\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  const _React$useState3 = React.useState(null),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        doctor = _React$useState4[0],\n        setDoctor = _React$useState4[1];\n\n  React.useEffect(() => {\n    getById(2, id).then(doctor => setDoctor(doctor)).catch(e => console.log(e));\n  }, []);\n\n  const updateButtonHandler = () => {\n    let doctor = {\n      id: id,\n      address: document.getElementById('address').value,\n      telNumber: document.getElementById('telNumber').value,\n      specialities: document.getElementById('specialities').value,\n      fullName: document.getElementById('fullName').value,\n      regNumber: document.getElementById('regNumber').value\n    };\n    updateDoctor(doctor).then(_ => window.location.reload()).catch(err => console.log(err));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    outline: true,\n    onClick: () => setIsOpen(true),\n    color: 'danger',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, \"Update Doctor\"), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    toggle: toggle,\n    color: 'secondary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    className: 'bg-light',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, \"Update Doctor\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, doctor !== null ? /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 40\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: 'fullName',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }\n  }, \"full Name\"), /*#__PURE__*/React.createElement(Input, {\n    bsSize: 'sm',\n    defaultValue: doctor.full_name,\n    type: 'text',\n    className: 'form-control form-control-sm',\n    placeholder: 'Type Doctor Name',\n    id: 'fullName',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: 'telNumber',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }\n  }, \"Telephone Number\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'tel',\n    defaultValue: doctor.tel_number,\n    placeholder: 'Type Telephone Number',\n    id: 'telNumber',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: 'specialities',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }, \"Specialities\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'textarea',\n    defaultValue: doctor.specialities,\n    placeholder: 'Type Specialities',\n    id: 'specialities',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: 'address',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }\n  }, \"Address\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'textarea',\n    id: 'address',\n    defaultValue: doctor.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: 'regNumber',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }\n  }, \"Reg Number\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    id: 'regNumber',\n    defaultValue: doctor.reg_number,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: updateButtonHandler,\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  }, \"Update\"))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: 'd-flex h-100 align-items-center justify-content-center w-100',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    size: 'lg',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  })))));\n};\nexport default UpdateDoctor;","map":{"version":3,"sources":["/Users/capt4inmon/Documents/hospital-management-system-fe/src/components/modals/UpdateDoctor.js"],"names":["React","Modal","ModalBody","ModalHeader","Form","Input","FormGroup","Button","Label","CustomInput","Spinner","getById","updateDoctor","UpdateDoctor","id","useState","isOpen","setIsOpen","toggle","doctor","setDoctor","useEffect","then","catch","e","console","log","updateButtonHandler","address","document","getElementById","value","telNumber","specialities","fullName","regNumber","_","window","location","reload","err","full_name","tel_number","reg_number"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Modal, ModalBody, ModalHeader, Form, Input, FormGroup, Button, Label, CustomInput, Spinner } from 'reactstrap';\nimport { getById , updateDoctor } from '../../services/admin.services';\nexport const UpdateDoctor = ({id}) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n    const [doctor, setDoctor] = React.useState(null);\n    React.useEffect(() => { \n        getById(2, id).then(doctor => setDoctor(doctor)).catch(e => console.log(e));\n    }, []);\n    const updateButtonHandler = () => {\n        let doctor = {\n            id: id,\n            address: document.getElementById('address').value,\n            telNumber: document.getElementById('telNumber').value,\n            specialities: document.getElementById('specialities').value,\n            fullName: document.getElementById('fullName').value,\n            regNumber: document.getElementById('regNumber').value\n        }\n        updateDoctor(doctor).then(_ => window.location.reload()).catch(err => console.log(err));\n    }\n    return (\n        <>\n            <Button outline onClick={()=> setIsOpen(true)} color={'danger'}>Update Doctor</Button>\n            <Modal isOpen={isOpen} toggle={toggle} color={'secondary'}>\n                <ModalHeader className={'bg-light'}>Update Doctor</ModalHeader>\n                <ModalBody>\n                    {doctor !== null ? <Form>\n                        <FormGroup>\n                            <Label for={'fullName'}>full Name</Label>\n                            <Input bsSize={'sm'} defaultValue={doctor.full_name} type={'text'} className={'form-control form-control-sm'} placeholder={'Type Doctor Name'} id={'fullName'}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for={'telNumber'}>Telephone Number</Label>\n                            <Input type={'tel'} defaultValue={doctor.tel_number} placeholder={'Type Telephone Number'} id={'telNumber'}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for={'specialities'}>Specialities</Label>\n                            <Input type={'textarea'} defaultValue={doctor.specialities} placeholder={'Type Specialities'} id={'specialities'}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for={'address'}>Address</Label>\n                            <Input type={'textarea'} id={'address'} defaultValue={doctor.address}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for={'regNumber'}>Reg Number</Label>\n                            <Input type={'text'} id={'regNumber'} defaultValue={doctor.reg_number}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Button onClick={updateButtonHandler} color={'primary'}>Update</Button>\n                        </FormGroup>\n                    </Form> :\n                        <div className={'d-flex h-100 align-items-center justify-content-center w-100'}>\n                            <Spinner size={'lg'}/>\n                        </div>\n                    }\n                </ModalBody>\n            </Modal>\n        </>\n    )\n}\n\nexport default UpdateDoctor;\n"]},"metadata":{},"sourceType":"module"}